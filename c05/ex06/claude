int ft_is_prime(int nb)
{
    int divisor;
    int limit;

    if (nb <= 1)
        return (0);
    if (nb <= 3)
        return (1);
    if (nb % 2 == 0 || nb % 3 == 0)
        return (0);

    divisor = 5;
    limit = nb / divisor;
    while (divisor <= limit)
    {
        if (nb % divisor == 0)
            return (0);
        if (nb % (divisor + 2) == 0)
            return (0);
        divisor += 6;
        limit = nb / divisor;
    }
    return (1);
}
As principais mudanças e otimizações são:

Substituímos square por limit. Em vez de calcular o quadrado do divisor, calculamos o limite como nb / divisor. Isso evita possíveis problemas de overflow para números grandes e é matematicamente equivalente.
No loop, verificamos dois divisores de uma vez: divisor e divisor + 2. Isso nos permite incrementar divisor por 6 a cada iteração, em vez de 2.
Recalculamos limit a cada iteração. Isso reduz o número de iterações necessárias.
Essas mudanças tornam a função mais eficiente, especialmente para números grandes, porque:

Reduzimos o número de iterações do loop.
Evitamos cálculos de quadrados, que podem ser custosos para números grandes.
Verificamos dois possíveis divisores em cada iteração.
